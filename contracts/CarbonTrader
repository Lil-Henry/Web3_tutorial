// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


error CarbonTrader_NotOwner();
error CarbonTrader_ParamError();
error CarbonTrader_TransferFailed();


contract CarbonTrader {
    struct trade {
        address seller;             //卖家地址
        uint256 sellAmount;         //要拍卖的碳额度
        uint256 startTimeStamp;     //拍卖开始时间戳
        uint256 endTimeStamp;       //拍卖结束时间戳
        uint256 minimumBidAmount;   //最少起拍数量
        uint256 initPriceOfUnit;    //每单位的起拍价格
        mapping (address => uint256) deposits;
        mapping (address => string) bidInfos;
        mapping (address => string) bidSecrets;
    }
    

    mapping (address => uint256) private s_addressToAllowances;
    mapping (address => uint256) private s_frozenAllowances;
    mapping (address => uint256) private s_auctionAmount;
    mapping (string => trade) private s_trade;


    address private immutable i_owner;
    IERC20 private immutable i_usdtToken;

    constructor(address usdtTokenAddress){
        i_owner = msg.sender;
        i_usdtToken = IERC20(usdtTokenAddress);
    }
    
    modifier onlyOwner(){
        if(msg.sender != i_owner){
            revert CarbonTrader_NotOwner();
        }
        _;
    }

    function issueAllowance(address user, uint256 amount) public onlyOwner {
        s_addressToAllowances[user] += amount;
    }

    function getAllowance(address user) public view returns (uint256) {
        return s_addressToAllowances[user];
    }

    function freezeAllowance(address user, uint256 freezeAmount) public onlyOwner {
        s_addressToAllowances[user] -= freezeAmount;
        s_frozenAllowances[user] += freezeAmount;
    }

    function unfreezeAllowance(address user, uint256 freezeAmount) public onlyOwner {
        s_addressToAllowances[user] += freezeAmount;
        s_frozenAllowances[user] -= freezeAmount;
    }

    function getFrozenAllowance(address user) public view returns(uint256) {
        return s_frozenAllowances[user];
    }

    function destoryAllowance(address user, uint256 destoryAmount) public onlyOwner{
        s_addressToAllowances[user] -= destoryAmount;
    }

    function destoryAllAllowance(address user) public onlyOwner {
        s_addressToAllowances[user] = 0;
        s_frozenAllowances[user] = 0;
    }

    function startTrade(
        string memory tradeID,
        uint256 amount,
        uint256 startTimeStamp,
        uint256 endTimeStamp,
        uint256 minimumBidAmount,
        uint256 initPriceOfUnit
    ) public {
        if(
            amount <= 0 || 
            startTimeStamp >= endTimeStamp || 
            minimumBidAmount <= 0 || 
            initPriceOfUnit <= 0 || 
            minimumBidAmount > amount
        ) revert CarbonTrader_ParamError();

        trade storage newTrade = s_trade[tradeID];

        newTrade.seller = msg.sender;   
        newTrade.sellAmount = amount;
        newTrade.startTimeStamp = startTimeStamp;
        newTrade.endTimeStamp = endTimeStamp;
        newTrade.minimumBidAmount = minimumBidAmount;
        newTrade.initPriceOfUnit = initPriceOfUnit;

        s_addressToAllowances[msg.sender] -= amount;
        s_frozenAllowances[msg.sender] += amount;
    }

    function getTrade(string memory tradeID) public view returns (
        address, uint256, uint256, uint256, uint256, uint256) {
            trade storage curTrade = s_trade[tradeID];
            return (
                curTrade.seller, 
                curTrade.sellAmount,
                curTrade.startTimeStamp,
                curTrade.endTimeStamp,
                curTrade.minimumBidAmount,
                curTrade.initPriceOfUnit
            );
    }


    function deposit(string memory tradeID, uint256 amount, string memory info) public  {
        trade storage curTrade = s_trade[tradeID];

        bool success = i_usdtToken.transferFrom(msg.sender, address(this), amount);
        if(!success){
            revert CarbonTrader_TransferFailed();
        }

        curTrade.deposits[msg.sender] = amount;
        setBidInfo(tradeID, info);
    }

    function refundDeposit(string memory tradeID) public {
        trade storage curTrade = s_trade[tradeID];
        uint256 depositAmount = curTrade.deposits[msg.sender];
        curTrade.deposits[msg.sender] = 0;

        bool success = i_usdtToken.transfer(msg.sender, depositAmount);
        if(!success){
            curTrade.deposits[msg.sender] = depositAmount;
            revert CarbonTrader_TransferFailed();
        }
        
    }


    function setBidInfo(string memory tradeID, string memory info) public {
        trade storage curTrade = s_trade[tradeID];
        curTrade.bidInfos[msg.sender] = info;
    }

    function setBidSecret(string memory tradeID, string memory secret) public {
        trade storage curTrade = s_trade[tradeID];
        curTrade.bidSecrets[msg.sender] = secret;
    }

    function getBidInfo(string memory tradeID) public view returns(string memory) {
        trade storage curTrade = s_trade[tradeID];
        return curTrade.bidInfos[msg.sender];
    }

    function finalizeAuctionAndTransferCarbon(
        string memory tradeID,
        uint256 allowanceAmount,
        uint256 addtionalAmountToPay
    ) public {
        // 获取保证金
        uint256 depositAmount = s_trade[tradeID].deposits[msg.sender];
        s_trade[tradeID].deposits[msg.sender] = 0;

        // 把保证金和新补的这些钱给卖家
        address seller = s_trade[tradeID].seller;
        s_auctionAmount[seller] += (depositAmount + addtionalAmountToPay);

        // 扣除卖家的碳额度
        s_frozenAllowances[seller] = 0;

        // 增加买家的碳额度
        s_addressToAllowances[msg.sender] += allowanceAmount;

        bool success = i_usdtToken.transferFrom(msg.sender, address(this), addtionalAmountToPay);
        if(!success){
            revert CarbonTrader_TransferFailed();
        }
    }

    function withdrawAcutionAmount() public {
        uint256 auctionAmount = s_auctionAmount[msg.sender];
        s_auctionAmount[msg.sender] = 0;

        bool success = i_usdtToken.transfer(msg.sender, auctionAmount);
        if(!success){
            s_auctionAmount[msg.sender] = auctionAmount;
            revert CarbonTrader_TransferFailed();
        }
    }


}
